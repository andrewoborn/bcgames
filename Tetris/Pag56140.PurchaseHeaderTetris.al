page 56140 PurchaseHeaderTetris
{
    ApplicationArea = All;
    Caption = 'Tetris';
    PageType = CardPart;
    SourceTable = "Purchase Header";

    layout
    {
        area(Content)
        {
            usercontrol(TetrisControl; TetrisControl)
            {
                ApplicationArea = all;
                trigger Ready()
                var
                    body: TextBuilder;
                begin
                    clear(body);
                    body.AppendLine('<!DOCTYPE html>');
                    body.AppendLine('<html>');
                    body.AppendLine('<head>');
                    body.AppendLine('  <title>Basic Tetris HTML Game</title>');
                    body.AppendLine('  <meta charset="UTF-8">');
                    body.AppendLine('  <style>');
                    body.AppendLine('  html, body {');
                    body.AppendLine('    height: 100%;');
                    body.AppendLine('    margin: 0;');
                    body.AppendLine('  }');
                    body.AppendLine('');
                    body.AppendLine('  body {');
                    body.AppendLine('    background: black;');
                    body.AppendLine('    display: flex;');
                    body.AppendLine('    align-items: center;');
                    body.AppendLine('    justify-content: center;');
                    body.AppendLine('  }');
                    body.AppendLine('');
                    body.AppendLine('  canvas {');
                    body.AppendLine('    border: 1px solid white;');
                    body.AppendLine('  }');
                    body.AppendLine('  </style>');
                    body.AppendLine('</head>');
                    body.AppendLine('<body>');
                    body.AppendLine('<canvas width="320" height="640" id="game"></canvas>');
                    body.AppendLine('<script>');
                    body.AppendLine('// https://tetris.fandom.com/wiki/Tetris_Guideline');
                    body.AppendLine('');
                    body.AppendLine('// get a random integer between the range of [min,max]');
                    body.AppendLine('// @see https://stackoverflow.com/a/1527820/2124254');
                    body.AppendLine('function getRandomInt(min, max) {');
                    body.AppendLine('  min = Math.ceil(min);');
                    body.AppendLine('  max = Math.floor(max);');
                    body.AppendLine('');
                    body.AppendLine('  return Math.floor(Math.random() * (max - min + 1)) + min;');
                    body.AppendLine('}');
                    body.AppendLine('');
                    body.AppendLine('// generate a new tetromino sequence');
                    body.AppendLine('// @see https://tetris.fandom.com/wiki/Random_Generator');
                    body.AppendLine('function generateSequence() {');
                    body.AppendLine('  const sequence = ["I", "J", "L", "O", "S", "T", "Z"];');
                    body.AppendLine('');
                    body.AppendLine('  while (sequence.length) {');
                    body.AppendLine('    const rand = getRandomInt(0, sequence.length - 1);');
                    body.AppendLine('    const name = sequence.splice(rand, 1)[0];');
                    body.AppendLine('    tetrominoSequence.push(name);');
                    body.AppendLine('  }');
                    body.AppendLine('}');
                    body.AppendLine('');
                    body.AppendLine('// get the next tetromino in the sequence');
                    body.AppendLine('function getNextTetromino() {');
                    body.AppendLine('  if (tetrominoSequence.length === 0) {');
                    body.AppendLine('    generateSequence();');
                    body.AppendLine('  }');
                    body.AppendLine('');
                    body.AppendLine('  const name = tetrominoSequence.pop();');
                    body.AppendLine('  const matrix = tetrominos[name];');
                    body.AppendLine('');
                    body.AppendLine('  // I and O start centered, all others start in left-middle');
                    body.AppendLine('  const col = playfield[0].length / 2 - Math.ceil(matrix[0].length / 2);');
                    body.AppendLine('');
                    body.AppendLine('  // I starts on row 21 (-1), all others start on row 22 (-2)');
                    body.AppendLine('  const row = name === "I" ? -1 : -2;');
                    body.AppendLine('');
                    body.AppendLine('  return {');
                    body.AppendLine('    name: name,      // name of the piece (L, O, etc.)');
                    body.AppendLine('    matrix: matrix,  // the current rotation matrix');
                    body.AppendLine('    row: row,        // current row (starts offscreen)');
                    body.AppendLine('    col: col         // current col');
                    body.AppendLine('  };');
                    body.AppendLine('}');
                    body.AppendLine('');
                    body.AppendLine('// rotate an NxN matrix 90deg');
                    body.AppendLine('// @see https://codereview.stackexchange.com/a/186834');
                    body.AppendLine('function rotate(matrix) {');
                    body.AppendLine('  const N = matrix.length - 1;');
                    body.AppendLine('  const result = matrix.map((row, i) =>');
                    body.AppendLine('    row.map((val, j) => matrix[N - j][i])');
                    body.AppendLine('  );');
                    body.AppendLine('');
                    body.AppendLine('  return result;');
                    body.AppendLine('}');
                    body.AppendLine('');
                    body.AppendLine('// check to see if the new matrix/row/col is valid');
                    body.AppendLine('function isValidMove(matrix, cellRow, cellCol) {');
                    body.AppendLine('  for (let row = 0; row < matrix.length; row++) {');
                    body.AppendLine('    for (let col = 0; col < matrix[row].length; col++) {');
                    body.AppendLine('      if (matrix[row][col] && (');
                    body.AppendLine('          // outside the game bounds');
                    body.AppendLine('          cellCol + col < 0 ||');
                    body.AppendLine('          cellCol + col >= playfield[0].length ||');
                    body.AppendLine('          cellRow + row >= playfield.length ||');
                    body.AppendLine('          // collides with another piece');
                    body.AppendLine('          playfield[cellRow + row][cellCol + col])');
                    body.AppendLine('        ) {');
                    body.AppendLine('        return false;');
                    body.AppendLine('      }');
                    body.AppendLine('    }');
                    body.AppendLine('  }');
                    body.AppendLine('');
                    body.AppendLine('  return true;');
                    body.AppendLine('}');
                    body.AppendLine('');
                    body.AppendLine('// place the tetromino on the playfield');
                    body.AppendLine('function placeTetromino() {');
                    body.AppendLine('  for (let row = 0; row < tetromino.matrix.length; row++) {');
                    body.AppendLine('    for (let col = 0; col < tetromino.matrix[row].length; col++) {');
                    body.AppendLine('      if (tetromino.matrix[row][col]) {');
                    body.AppendLine('');
                    body.AppendLine('        // game over if piece has any part offscreen');
                    body.AppendLine('        if (tetromino.row + row < 0) {');
                    body.AppendLine('          return showGameOver();');
                    body.AppendLine('        }');
                    body.AppendLine('');
                    body.AppendLine('        playfield[tetromino.row + row][tetromino.col + col] = tetromino.name;');
                    body.AppendLine('      }');
                    body.AppendLine('    }');
                    body.AppendLine('  }');
                    body.AppendLine('');
                    body.AppendLine('  // check for line clears starting from the bottom and working our way up');
                    body.AppendLine('  for (let row = playfield.length - 1; row >= 0; ) {');
                    body.AppendLine('    if (playfield[row].every(cell => !!cell)) {');
                    body.AppendLine('');
                    body.AppendLine('      // drop every row above this one');
                    body.AppendLine('      for (let r = row; r >= 0; r--) {');
                    body.AppendLine('        for (let c = 0; c < playfield[r].length; c++) {');
                    body.AppendLine('          playfield[r][c] = playfield[r-1][c];');
                    body.AppendLine('        }');
                    body.AppendLine('      }');
                    body.AppendLine('    }');
                    body.AppendLine('    else {');
                    body.AppendLine('      row--;');
                    body.AppendLine('    }');
                    body.AppendLine('  }');
                    body.AppendLine('');
                    body.AppendLine('  tetromino = getNextTetromino();');
                    body.AppendLine('}');
                    body.AppendLine('');
                    body.AppendLine('// show the game over screen');
                    body.AppendLine('function showGameOver() {');
                    body.AppendLine('  cancelAnimationFrame(rAF);');
                    body.AppendLine('  gameOver = true;');
                    body.AppendLine('');
                    body.AppendLine('  context.fillStyle = "black";');
                    body.AppendLine('  context.globalAlpha = 0.75;');
                    body.AppendLine('  context.fillRect(0, canvas.height / 2 , canvas.width, 60);');
                    body.AppendLine('');
                    body.AppendLine('  context.globalAlpha = 1;');
                    body.AppendLine('  context.fillStyle = "white";');
                    body.AppendLine('  context.font = "36px monospace";');
                    body.AppendLine('  context.textAlign = "center";');
                    body.AppendLine('  context.textBaseline = "middle";');
                    body.AppendLine('  context.fillText("GAME OVER!", canvas.width / 2, canvas.height / 2);');
                    body.AppendLine('}');
                    body.AppendLine('');
                    body.AppendLine('const canvas = document.getElementById("game");');
                    body.AppendLine('const context = canvas.getContext("2d");');
                    body.AppendLine('const grid = 32;');
                    body.AppendLine('const tetrominoSequence = [];');
                    body.AppendLine('');
                    body.AppendLine('// keep track of what is in every cell of the game using a 2d array');
                    body.AppendLine('// tetris playfield is 10x20, with a few rows offscreen');
                    body.AppendLine('const playfield = [];');
                    body.AppendLine('');
                    body.AppendLine('// populate the empty state');
                    body.AppendLine('for (let row = -2; row < 16; row++) {');
                    body.AppendLine('  playfield[row] = [];');
                    body.AppendLine('');
                    body.AppendLine('  for (let col = 0; col < 10; col++) {');
                    body.AppendLine('    playfield[row][col] = 0;');
                    body.AppendLine('  }');
                    body.AppendLine('}');
                    body.AppendLine('');
                    body.AppendLine('// how to draw each tetromino');
                    body.AppendLine('// @see https://tetris.fandom.com/wiki/SRS');
                    body.AppendLine('const tetrominos = {');
                    body.AppendLine('  "I": [');
                    body.AppendLine('    [0,0,0,0],');
                    body.AppendLine('    [1,1,1,1],');
                    body.AppendLine('    [0,0,0,0],');
                    body.AppendLine('    [0,0,0,0]');
                    body.AppendLine('  ],');
                    body.AppendLine('  "J": [');
                    body.AppendLine('    [1,0,0],');
                    body.AppendLine('    [1,1,1],');
                    body.AppendLine('    [0,0,0],');
                    body.AppendLine('  ],');
                    body.AppendLine('  "L": [');
                    body.AppendLine('    [0,0,1],');
                    body.AppendLine('    [1,1,1],');
                    body.AppendLine('    [0,0,0],');
                    body.AppendLine('  ],');
                    body.AppendLine('  "O": [');
                    body.AppendLine('    [1,1],');
                    body.AppendLine('    [1,1],');
                    body.AppendLine('  ],');
                    body.AppendLine('  "S": [');
                    body.AppendLine('    [0,1,1],');
                    body.AppendLine('    [1,1,0],');
                    body.AppendLine('    [0,0,0],');
                    body.AppendLine('  ],');
                    body.AppendLine('  "Z": [');
                    body.AppendLine('    [1,1,0],');
                    body.AppendLine('    [0,1,1],');
                    body.AppendLine('    [0,0,0],');
                    body.AppendLine('  ],');
                    body.AppendLine('  "T": [');
                    body.AppendLine('    [0,1,0],');
                    body.AppendLine('    [1,1,1],');
                    body.AppendLine('    [0,0,0],');
                    body.AppendLine('  ]');
                    body.AppendLine('};');
                    body.AppendLine('');
                    body.AppendLine('// color of each tetromino');
                    body.AppendLine('const colors = {');
                    body.AppendLine('  "I": "cyan",');
                    body.AppendLine('  "O": "yellow",');
                    body.AppendLine('  "T": "purple",');
                    body.AppendLine('  "S": "green",');
                    body.AppendLine('  "Z": "red",');
                    body.AppendLine('  "J": "blue",');
                    body.AppendLine('  "L": "orange"');
                    body.AppendLine('};');
                    body.AppendLine('');
                    body.AppendLine('let count = 0;');
                    body.AppendLine('let tetromino = getNextTetromino();');
                    body.AppendLine('let rAF = null;  // keep track of the animation frame so we can cancel it');
                    body.AppendLine('let gameOver = false;');
                    body.AppendLine('');
                    body.AppendLine('// game loop');
                    body.AppendLine('function loop() {');
                    body.AppendLine('  rAF = requestAnimationFrame(loop);');
                    body.AppendLine('  context.clearRect(0,0,canvas.width,canvas.height);');
                    body.AppendLine('');
                    body.AppendLine('  // draw the playfield');
                    body.AppendLine('  for (let row = 0; row < 16; row++) {');
                    body.AppendLine('    for (let col = 0; col < 10; col++) {');
                    body.AppendLine('      if (playfield[row][col]) {');
                    body.AppendLine('        const name = playfield[row][col];');
                    body.AppendLine('        context.fillStyle = colors[name];');
                    body.AppendLine('');
                    body.AppendLine('        // drawing 1 px smaller than the grid creates a grid effect');
                    body.AppendLine('        context.fillRect(col * grid, row * grid, grid-1, grid-1);');
                    body.AppendLine('      }');
                    body.AppendLine('    }');
                    body.AppendLine('  }');
                    body.AppendLine('');
                    body.AppendLine('  // draw the active tetromino');
                    body.AppendLine('  if (tetromino) {');
                    body.AppendLine('');
                    body.AppendLine('    // tetromino falls every 35 frames');
                    body.AppendLine('    if (++count > 35) {');
                    body.AppendLine('      tetromino.row++;');
                    body.AppendLine('      count = 0;');
                    body.AppendLine('');
                    body.AppendLine('      // place piece if it runs into anything');
                    body.AppendLine('      if (!isValidMove(tetromino.matrix, tetromino.row, tetromino.col)) {');
                    body.AppendLine('        tetromino.row--;');
                    body.AppendLine('        placeTetromino();');
                    body.AppendLine('      }');
                    body.AppendLine('    }');
                    body.AppendLine('');
                    body.AppendLine('    context.fillStyle = colors[tetromino.name];');
                    body.AppendLine('');
                    body.AppendLine('    for (let row = 0; row < tetromino.matrix.length; row++) {');
                    body.AppendLine('      for (let col = 0; col < tetromino.matrix[row].length; col++) {');
                    body.AppendLine('        if (tetromino.matrix[row][col]) {');
                    body.AppendLine('');
                    body.AppendLine('          // drawing 1 px smaller than the grid creates a grid effect');
                    body.AppendLine('          context.fillRect((tetromino.col + col) * grid, (tetromino.row + row) * grid, grid-1, grid-1);');
                    body.AppendLine('        }');
                    body.AppendLine('      }');
                    body.AppendLine('    }');
                    body.AppendLine('  }');
                    body.AppendLine('}');
                    body.AppendLine('');
                    body.AppendLine('// listen to keyboard events to move the active tetromino');
                    body.AppendLine('document.addEventListener("keydown", function(e) {');
                    body.AppendLine('  if (gameOver) return;');
                    body.AppendLine('');
                    body.AppendLine('  // left and right arrow keys (move)');
                    body.AppendLine('  if (e.which === 37 || e.which === 39) {');
                    body.AppendLine('    const col = e.which === 37');
                    body.AppendLine('      ? tetromino.col - 1');
                    body.AppendLine('      : tetromino.col + 1;');
                    body.AppendLine('');
                    body.AppendLine('    if (isValidMove(tetromino.matrix, tetromino.row, col)) {');
                    body.AppendLine('      tetromino.col = col;');
                    body.AppendLine('    }');
                    body.AppendLine('  }');
                    body.AppendLine('');
                    body.AppendLine('  // up arrow key (rotate)');
                    body.AppendLine('  if (e.which === 38) {');
                    body.AppendLine('    const matrix = rotate(tetromino.matrix);');
                    body.AppendLine('    if (isValidMove(matrix, tetromino.row, tetromino.col)) {');
                    body.AppendLine('      tetromino.matrix = matrix;');
                    body.AppendLine('    }');
                    body.AppendLine('  }');
                    body.AppendLine('');
                    body.AppendLine('  // down arrow key (drop)');
                    body.AppendLine('  if(e.which === 40) {');
                    body.AppendLine('    const row = tetromino.row + 1;');
                    body.AppendLine('');
                    body.AppendLine('    if (!isValidMove(tetromino.matrix, row, tetromino.col)) {');
                    body.AppendLine('      tetromino.row = row - 1;');
                    body.AppendLine('');
                    body.AppendLine('      placeTetromino();');
                    body.AppendLine('      return;');
                    body.AppendLine('    }');
                    body.AppendLine('');
                    body.AppendLine('    tetromino.row = row;');
                    body.AppendLine('  }');
                    body.AppendLine('});');
                    body.AppendLine('');
                    body.AppendLine('// start the game');
                    body.AppendLine('rAF = requestAnimationFrame(loop);');
                    body.AppendLine('</script>');
                    body.AppendLine('</body>');
                    body.AppendLine('</html>');

                    CurrPage.TetrisControl.embedHomePage(body.ToText());
                end;
            }
        }
    }
}
